version: 2.1

.dockersetup: &dockersetup
  docker:
    - image: pennbbl/xcpd_build:0.0.6rc1
  working_directory: /src/xcp_d

runinstall: &runinstall
  name: Install xcp_d
  command: |
    VERSION=0+build
    if [[ -n "$CIRCLE_TAG" ]]; then
      VERSION="$CIRCLE_TAG"
    fi
    git checkout $CIRCLE_BRANCH
    echo "${VERSION}" > /src/xcp_d/xcp_d/VERSION
    echo "include xcp_d/VERSION" >> /src/xcp_d/MANIFEST.in
    pip install .[tests] --progress-bar off

    # Write the config file
    mkdir ~/.nipype
    CFG=~/.nipype/nipype.cfg
    printf "[execution]\nstop_on_first_crash = true\n" > ${CFG}
    echo "poll_sleep_duration = 0.01" >> ${CFG}
    echo "hash_method = content" >> ${CFG}

jobs:
  build:
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall

  download_data_fmriprepwithfreesurfer:
    <<: *dockersetup
    working_directory: /src/xcp_d/.circleci/
    steps:
      - checkout
      - restore_cache:
          key: fmriprepwithfreesurfer-01
      - run:
          name: Download fmriprepwithfreesurfer test data
          command: |
            TESTDIR="/src/xcp_d/.circleci"
            cd ${TESTDIR}
            source get_data.sh
            get_bids_data ${TESTDIR} fmriprep_colornest
            get_bids_data ${TESTDIR} freesurfer_colornest
      - save_cache:
          key: fmriprepwithfreesurfer-01
          paths:
              - /src/xcp_d/.circleci/data/fmriprepwithfreesurfer

  download_data_fmriprepwithoutfreesurfer:
    <<: *dockersetup
    working_directory: /src/xcp_d/.circleci/
    steps:
      - checkout
      - restore_cache:
          key: fmriprepwithoutfreesurfer-01
      - run:
          name: Download fmriprepwithoutfreesurfer test data
          command: |
            TESTDIR="/src/xcp_d/.circleci"
            cd ${TESTDIR}
            source get_data.sh
            get_bids_data ${TESTDIR} sub01
      - save_cache:
          key: fmriprepwithoutfreesurfer-01
          paths:
              - /src/xcp_d/.circleci/data/fmriprepwithoutfreesurfer

  download_data_nibabies:
    <<: *dockersetup
    working_directory: /src/xcp_d/.circleci/
    steps:
      - checkout
      - restore_cache:
          key: nibabies-01
      - run:
          name: Download nibabies test data
          command: |
            TESTDIR="/src/xcp_d/.circleci"
            cd ${TESTDIR}
            source get_data.sh
            get_bids_data ${TESTDIR} nibabies
      - save_cache:
          key: nibabies-01
          paths:
              - /src/xcp_d/.circleci/data/nibabies_test_data

  nifti_without_freesurfer:
    <<: *dockersetup
    steps:
      - checkout
      - run:
          name: Check whether build should be skipped
          command: |
            cd /src/xcp_d
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?nifti_without_freesurfer\]' )" != "" ]]; then
              echo "Skipping nifti_without_freesurfer build"
              circleci step halt
            fi
      - restore_cache:
          key: fmriprepwithoutfreesurfer-01
      - run: *runinstall
      - run:
          name: Run full xcp_d on nifti without freesurfer
          no_output_timeout: 1h
          command: |
            cd /src/xcp_d/.circleci
            bash NiftiWithoutFreeSurferTest.sh
      - store_artifacts:
          path: /src/xcp_d/.circleci/nifti_without_freesurfer/derivatives/xcp_d/
      - run:
          name: Check outputs of xcp_d run
          command: |
            mkdir -p /tmp/nifti_without_freesurfer/test
            CHECK_OUTPUTS_FILE="nifti_without_freesurfer_outputs.txt"
            find /src/xcp_d/.circleci/nifti_without_freesurfer/derivatives/xcp_d/ \( -path */figures -o -path */log \) -prune -o -name "*" -print | sed s+/src/xcp_d/.circleci/nifti_without_freesurfer/derivatives/++ | grep -v sourcedata | sort > /tmp/nifti_without_freesurfer/test/outputs.out
            diff <(sort /src/xcp_d/.circleci/${CHECK_OUTPUTS_FILE}) <(sort /tmp/nifti_without_freesurfer/test/outputs.out)
            exit $?

  nifti_with_freesurfer:
    <<: *dockersetup
    steps:
      - checkout
      - run:
          name: Check whether build should be skipped
          command: |
            cd /src/xcp_d
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?nifti_with_freesurfer\]' )" != "" ]]; then
              echo "Skipping nifti_with_freesurfer build"
              circleci step halt
            fi
      - restore_cache:
          key: fmriprepwithfreesurfer-01
      - run: *runinstall
      - run:
          name: Run full xcp_d on nifti with freesurfer
          no_output_timeout: 1h
          command: |
            cd /src/xcp_d/.circleci
            bash NiftiWithFreeSurferTest.sh
      - store_artifacts:
          path: /src/xcp_d/.circleci/nifti_with_freesurfer/derivatives/xcp_d/
      - run:
          name: Check outputs of xcp_d run
          command: |
            mkdir -p /tmp/nifti_with_freesurfer/test
            CHECK_OUTPUTS_FILE="nifti_with_freesurfer_outputs.txt"
            find /src/xcp_d/.circleci/nifti_with_freesurfer/derivatives/xcp_d/ \( -path */figures -o -path */log \) -prune -o -name "*" -print | sed s+/src/xcp_d/.circleci/nifti_with_freesurfer/derivatives/++ | grep -v sourcedata | sort > /tmp/nifti_with_freesurfer/test/outputs.out
            diff <(sort /src/xcp_d/.circleci/${CHECK_OUTPUTS_FILE}) <(sort /tmp/nifti_with_freesurfer/test/outputs.out)
            exit $?

  nibabies:
    <<: *dockersetup
    steps:
      - checkout
      - run:
          name: Check whether build should be skipped
          command: |
            cd /src/xcp_d
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?nibabies\]' )" != "" ]]; then
              echo "Skipping nibabies build"
              circleci step halt
            fi
      - restore_cache:
          key: nibabies-01
      - run: *runinstall
      - run:
          name: Run full xcp_d on nibabies
          no_output_timeout: 1h
          command: |
            cd /src/xcp_d/.circleci
            bash Nibabies.sh
      - store_artifacts:
          path: /src/xcp_d/.circleci/nibabies/derivatives/xcp_d/
      - run:
          name: Check outputs of xcp_d run
          command: |
            mkdir -p /tmp/nibabies/test
            CHECK_OUTPUTS_FILE="nibabies_outputs.txt"
            find /src/xcp_d/.circleci/nibabies/derivatives/xcp_d/ \( -path */figures -o -path */log \) -prune -o -name "*" -print | sed s+/src/xcp_d/.circleci/nibabies/derivatives/++ | grep -v sourcedata | sort > /tmp/nibabies/test/outputs.out
            diff <(sort /src/xcp_d/.circleci/${CHECK_OUTPUTS_FILE}) <(sort /tmp/nibabies/test/outputs.out)
            exit $?

  cifti_with_freesurfer:
    <<: *dockersetup
    steps:
      - checkout
      - run:
          name: Check whether build should be skipped
          command: |
            cd /src/xcp_d
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?cifti_with_freesurfer\]' )" != "" ]]; then
              echo "Skipping cifti_with_freesurfer build"
              circleci step halt
            fi
      - restore_cache:
          key: fmriprepwithfreesurfer-01
      - run: *runinstall
      - run:
          name: Run full xcp_d on cifti with freesurfer
          no_output_timeout: 5h
          command: |
            cd /src/xcp_d/.circleci
            bash CiftiWithFreeSurferTest.sh
      - store_artifacts:
          path: /src/xcp_d/.circleci/cifti_with_freesurfer/derivatives/xcp_d/
      - run:
          name: Check outputs of xcp_d run
          command: |
            mkdir -p /tmp/cifti_with_freesurfer/test
            CHECK_OUTPUTS_FILE="cifti_with_freesurfer_outputs.txt"
            find /src/xcp_d/.circleci/cifti_with_freesurfer/derivatives/xcp_d/ \( -path */figures -o -path */log \) -prune -o -name "*" -print | sed s+/src/xcp_d/.circleci/cifti_with_freesurfer/derivatives/++ | grep -v sourcedata | sort > /tmp/cifti_with_freesurfer/test/outputs.out
            diff <(sort /src/xcp_d/.circleci/${CHECK_OUTPUTS_FILE}) <(sort /tmp/cifti_with_freesurfer/test/outputs.out)
            exit $?

  pytests:
    <<: *dockersetup
    steps:
      - checkout
      - run:
          name: Check whether build should be skipped
          command: |
            cd /src/xcp_d
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?cifti_with_freesurfer\]' )" != "" ]]; then
              echo "Skipping cifti_with_freesurfer build"
              circleci step halt
            fi
      - restore_cache:
          key: fmriprepwithfreesurfer-01
      - restore_cache:
          key: fmriprepwithoutfreesurfer-01
      - run: *runinstall
      - run:
          name: Run pytest on the tests directory
          no_output_timeout: 1h
          command: |
            cd /src/xcp_d/.circleci
            bash RunPyTests.sh

  deployable:
    docker:
      - image: busybox:latest
    steps:
      - run: echo Deploying!

  build_and_deploy:
    environment:
      TZ: "/usr/share/zoneinfo/America/New_York"
    docker:
      - image: cimg/base:2020.09
    working_directory: /tmp/src/xcpd_build
    steps:
      - checkout
      - setup_remote_docker:
         version: 19.03.13
         docker_layer_caching: true
      - run:
          name: Build Docker image
          no_output_timeout: 3h
          command: |
            # Get version, update files.
            THISVERSION=$( python3 get_version.py )
            if [[ ${THISVERSION:0:1} == "0" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            sed -i "s/title = {xcp_d}/title = {xcp_d ${CIRCLE_TAG:-$THISVERSION}}/" xcp_d/data/boilerplate.bib
            # Build docker image
            e=1 && for i in {1..5}; do
              docker build \
                --cache-from=pennlinc/xcp_d \
                --rm=false \
                -t pennlinc/xcp_d:latest \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag pennlinc/xcp_d pennlinc/xcp_d:unstable
              docker push pennlinc/xcp_d:unstable
              if [[ -n "$CIRCLE_TAG" ]]; then
                docker push pennlinc/xcp_d:latest
                docker tag pennlinc/xcp_d pennlinc/xcp_d:$CIRCLE_TAG
                docker push pennlinc/xcp_d:$CIRCLE_TAG
              fi
            fi

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - download_data_fmriprepwithfreesurfer:
          requires:
            - build

      - download_data_fmriprepwithoutfreesurfer:
          requires:
            - build

      - download_data_nibabies:
          requires:
            - build

      - cifti_with_freesurfer:
          requires:
            - build
            - download_data_fmriprepwithfreesurfer
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - nifti_with_freesurfer:
          requires:
            - build
            - download_data_fmriprepwithfreesurfer
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - nibabies:
          requires:
            - build
            - download_data_nibabies
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - nifti_without_freesurfer:
          requires:
            - build
            - download_data_fmriprepwithoutfreesurfer
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - pytests:
          requires:
            - build
            - download_data_fmriprepwithfreesurfer
            - download_data_fmriprepwithoutfreesurfer
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - deployable:
          requires:
            - nifti_with_freesurfer
            - nifti_without_freesurfer
            - nibabies
            - cifti_with_freesurfer
            - pytests
          filters:
            branches:
              only: main
            tags:
              only: /.*/

      - build_and_deploy:
          requires:
            - deployable
          filters:
            branches:
              only: main
            tags:
              only: /.*/
