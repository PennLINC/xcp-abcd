version: 2
jobs:
  build:
    environment:
      TZ: "/usr/share/zoneinfo/America/New_York"
      SCRATCH: "/scratch"
    docker:
      - image: docker:18.06.1-ce-git
    working_directory: /tmp/src/xcp_d
    steps:
      - run:
          name: Install parallel gzip tar and python3
          command: |
            apk add --no-cache pigz tar python3
      - restore_cache:
          keys:
            - docker-v2-{{ .Branch }}-{{ epoch }}
            - docker-v2-{{ .Branch }}-
            - docker-v2-master-
            - docker-v2-
          paths:
            - /tmp/cache/docker.tar.gz
      - checkout
      - setup_remote_docker
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Build Docker image
          no_output_timeout: 3h
          command: |
            # Get version, update files.
            THISVERSION=$( python3 get_version.py )
            if [[ ${THISVERSION:0:5} == "0" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            sed -i "s/title = {xcp_d}/title = {xcp_d ${CIRCLE_TAG:-$THISVERSION}}/" xcp_d/data/boilerplate.bib
            # Build docker image
            e=1 && for i in {1..5}; do
              docker build \
                --cache-from=pennlinc/xcp_d \
                --rm=false \
                -t pennlinc/xcp_d:latest \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
      - run:
          name: Docker save
          no_output_timeout: 40m
          command: |
            mkdir -p /tmp/cache
            docker save  pennlinc/xcp_d:latest \
            | pigz -8 -p 3 > /tmp/cache/docker.tar.gz
      - persist_to_workspace:
          root: /tmp
          paths:
            - cache/docker.tar.gz

  get_data:
    machine:
      image: cimg/base:2020.09
    working_directory: /home/circleci/data
    steps:
      - restore_cache:
          keys:
            - data-v1-{{ epoch }}
            - data-v1-
      - run:
          name: Get test data from box
          command: |
            mkdir -p /tmp/data
            cd /tmp/data
            if [[ ! -d /tmp/data/fmriprepdata/withfreesurfer  ]]; then
              wget --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 0 -q \
                -O fmriprepdata.tar.xz "https://upenn.box.com/shared/static/k0ccctapoe1ne7xby2lrh4soqjrha8kb.zx"
              tar xvfJ fmriprepdata.tar.xz 
              rm -rf fmriprepdata.tar.xz 
            else
              echo "fmriprep data was cached"
            fi
            mkdir -p /tmp/wkdir


      - persist_to_workspace:
          root: /tmp
          paths:
            - data
      - save_cache:
         key: data-v1-{{ epoch }}
         paths:
            - /tmp/data


  update_cache:
    machine:
      image: ubuntu-2004:202010-01
    working_directory: /tmp/src/xcp_d
    steps:
      - attach_workspace:
          at: /tmp
      - save_cache:
         key: docker-v2-{{ .Branch }}-{{ epoch }}
         paths:
           - /tmp/cache/docker.tar.gz


  xcpd_niftiW:
    machine:
      image: ubuntu-2004:202010-01
    working_directory: /tmp/data
    steps:
      - checkout:
          path: /home/circleci/src/xcp_d
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/xcp_d
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?xcpd_niftiW\]' )" != "" ]]; then
              echo "Skipping xcpd_nifti build"
              circleci step halt
            fi
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - xcpd_niftiW-v2-{{ .Branch }}-{{ epoch }}
            - xcpd_niftiW-v2-{{ .Branch }}
            - xcpd_niftiW-v2-master
            - xcpd_niftiW-v2-
      - run:
          name: Setting up test
          command: |
            mkdir -p /tmp/xcpd_niftiW && sudo setfacl -d -m group:$(id -gn):rwx /tmp/xcpd_niftiW  && sudo setfacl -m group:$(id -gn):rwx /tmp/xcpd_niftiW

      - run:
          name: Load Docker image layer cache
          no_output_timeout: 1h
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Run full xcpd_abcd on nifti without freesurfer 
          no_output_timeout: 5h
          command: |
            sudo setfacl -d -m group:$(id -gn):rwx /tmp/xcpd_niftiW && \
                sudo setfacl -m group:$(id -gn):rwx /tmp/xcpd_niftiW
        
            docker run --rm -it \
                -v /tmp/data:/data/ \
                -v /tmp/wkdir:/wkdir \
                -v /tmp:/scrth \
                -v /tmp/xcpd_niftiW/:/out \
                pennlinc/xcp_d:latest \
                /data/fmriprepdata/fmriprepdata/withoutfreesurfer \
                /out   \
                --despike  --head_radius 40 \
                -w /scrth/wkdir_niftiW --smoothing 6  -f 100

      - run:
          name: Checking outputs of xcpd_niftiW
          command: |
            qcfile=$(ls -f /tmp/xcpd_niftiW/xcp_d/sub-01/func/sub-01_task-mixedgamblestask_run-2_space-MNI152NLin2009cAsym_desc-qc_bold.csv)
            if [[ -f ${qcfile} ]]; then 
            echo "processing complete"
               exit 0
            else 
            echo "there is error "
                exit 1
            fi

      - run:
          name: Clean working directory
          when: always
          command: |
            sudo chown $(id -un):$(id -gn) -R /tmp/wkdir_niftiW
            rm -rf /tmp/wkdir_niftiW

      - store_artifacts:
          path: /tmp/xcpd_niftiW

          
  xcpd_ciftiF:
    machine:
      image: ubuntu-2004:202010-01
    working_directory: /tmp/data
    steps:
      - checkout:
          path: /home/circleci/src/xcp_d
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/xcp_d
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?xcpd_ciftiF\]' )" != "" ]]; then
              echo "Skipping xcpd_ciftiF build"
              circleci step halt
            fi
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - xcpd_ciftiF-v2-{{ .Branch }}-{{ epoch }}
            - xcpd_ciftiF-v2-{{ .Branch }}
            - xcpd_ciftiF-v2-master
            - xcpd_ciftiF-v2-
      - run:
          name: Setting up test
          command: |
            mkdir -p /tmp/xcpd_ciftiF && sudo setfacl -d -m group:$(id -gn):rwx /tmp/xcpd_ciftiF  && sudo setfacl -m group:$(id -gn):rwx /tmp/xcpd_ciftiF

      - run:
          name: Load Docker image layer cache
          no_output_timeout: 1h
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Run full xcpd_abcd on cifti with freesurfer 
          no_output_timeout: 5h
          command: |
            sudo setfacl -d -m group:$(id -gn):rwx /tmp/xcpd_ciftiF && \
                sudo setfacl -m group:$(id -gn):rwx /tmp/xcpd_ciftiF
        
            docker run --rm -it \
                -v /tmp/data:/data/ \
                -v /tmp/wkdir:/wkdir \
                -v /tmp:/scrth \
                -v /tmp/xcpd_ciftiF/:/out \
                pennlinc/xcp_d:latest \
                /data/fmriprepdata/withfreesurfer/fmriprep \
                /out   --cifti \
                --despike  --head_radius 40 \
                -w /scrth/wkdir_ciftiF --smoothing 6 
  

      - run:
          name: Checking outputs of xcpd_ciftiF
          command: |
            qcfile=$(ls -f /tmp/xcpd_ciftiF/xcp_d/sub-colornest001/ses-1/func/sub-colornest001_ses-1_task-rest_run-1_space-fsLR_desc-qc_bold.csv)
            if [[ -f ${qcfile} ]]; then 
            echo "processing complete"
               exit 0
            else 
            echo "there is error "
                exit 1
            fi

      - run:
          name: Clean working  directory
          when: always
          command: |
            sudo chown $(id -un):$(id -gn) -R /tmp/wkdir_ciftiF
            rm -rf /tmp/wkdir_ciftiF

      - store_artifacts:
          path: /tmp/xcpd_ciftiF


  xcpd_niftiF:
    machine:
      image: ubuntu-2004:202010-01
    working_directory: /tmp/data
    steps:
      - checkout:
          path: /home/circleci/src/xcp_d
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/xcp_d
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?xcpd_niftiF\]' )" != "" ]]; then
              echo "Skipping xcpd_niftiF build"
              circleci step halt
            fi
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - xcpd_niftiF-v2-{{ .Branch }}-{{ epoch }}
            - xcpd_niftiF-v2-{{ .Branch }}
            - xcpd_niftiF-v2-master
            - xcpd_niftiF-v2-
      - run:
          name: Setting up test
          command: |
            mkdir -p /tmp/xcpd_niftiF && sudo setfacl -d -m group:$(id -gn):rwx /tmp/xcpd_niftiF  && sudo setfacl -m group:$(id -gn):rwx /tmp/xcpd_niftiF

      - run:
          name: Load Docker image layer cache
          no_output_timeout: 1h
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Run full xcpd_abcd on nifti with freesurfer 
          no_output_timeout: 5h
          command: |
            sudo setfacl -d -m group:$(id -gn):rwx /tmp/xcpd_niftiF && \
                sudo setfacl -m group:$(id -gn):rwx /tmp/xcpd_niftiF
        
            docker run --rm -it \
                -v /tmp/data:/data/ \
                -v /tmp/wkdir:/wkdir \
                -v /tmp:/scrth \
                -v /tmp/xcpd_niftiF/:/out \
                pennlinc/xcp_d:latest \
                /data/fmriprepdata/withfreesurfer/fmriprep \
                /out   \
                --despike  --head_radius 40 \
                -w /scrth/wkdir_niftiF --smoothing 6 
  

      - run:
          name: Checking outputs of xcpd_niftiF
          command: |
            qcfile=$(ls -f /tmp/xcpd_niftiF/xcp_d/sub-colornest001/ses-1/func/sub-colornest001_ses-1_task-rest_run-2_space-MNI152NLin2009cAsym_desc-qc_bold.csv)
            if [[ -f ${qcfile} ]]; then 
            echo "processing complete"
               exit 0
            else 
            echo "there is error "
                exit 1
            fi

      - run:
          name: Clean working  directory
          when: always
          command: |
            sudo chown $(id -un):$(id -gn) -R /tmp/wkdir_niftiF
            rm -rf /tmp/wkdir_niftiF

      - store_artifacts:
          path: /tmp/xcpd_niftiF

  deploy_docker:
      machine:
        image: ubuntu-2004:202010-01
      working_directory: /tmp/src/xcp_d
      steps:
        - attach_workspace:
            at: /tmp
        - run:
            name: Load Docker image layer cache
            no_output_timeout: 2h
            command: |
              docker info
              set +o pipefail
              if [ -f /tmp/cache/docker.tar.gz ]; then
                sudo apt update && sudo apt -y install pigz
                pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
                docker images
              fi
        - run:
            name: Deploy to Docker Hub
            no_output_timeout: 1h
            command: |
              if [[ -n "$DOCKER_PASS" ]]; then
                docker login -u $DOCKER_USER -p $DOCKER_PASS
                docker tag pennlinc/xcp_d pennlinc/xcp_d:unstable
                docker push pennlinc/xcp_d:unstable
              fi

              if [[ -n "$CIRCLE_TAG" ]]; then
                docker push pennlinc/xcp_d:latest
                docker tag pennlinc/xcp_d pennlinc/xcp_d:$CIRCLE_TAG
                docker push pennlinc/xcp_d:$CIRCLE_TAG
              fi
      
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - get_data:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - update_cache:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - xcpd_ciftiF:
          requires:
            - get_data
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/
              
      - xcpd_niftiF:
          requires:
            - get_data
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - xcpd_niftiW:
          requires:
            - get_data
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - deploy_docker:
          requires:
            - build
            - xcpd_ciftiF
            - xcpd_niftiF
            - xcpd_niftiW
          filters:
            branches:
              only: main
            tags:
              only: /.*/
